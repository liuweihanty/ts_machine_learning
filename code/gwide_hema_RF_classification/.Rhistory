librray(Seurat)
librray(Seurat)
library(Seurat)
library(dplyr)
library(ggplot2)
pbmc.data <- Read10X(data.dir = "/Users/weihan/Desktop/SZ_project/filtered_feature_bc_matrix")
pbmc <- CreateSeuratObject(counts = pbmc.data, min.cells = 3, min.features = 200) #here we set the minimum threshold of reading in the count matrix. Each gene has to be detected in a minimum  of 3 cells, and each cell has be have at least 300 genes detetcted.
pbmc
library(Seurat)
library(dplyr)
library(ggplot2)
dense.size_kon1 <- object.size(x = as.matrix(pbmc.data))
dense.size_pbmc <- object.size(x = as.matrix(pbmc.data))
sparse.size_pbmc <- object.size(x = pbmc.data)
dense.size_pbmc/sparse.size_pbmc
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
str(pbmc@meta.data)
VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
#calculate the total number of features detected for each cell by adding up all the non-0 features for every column in the count matrix
View(pbmc@meta.data)
#calculate the total number of features detected for each cell by adding up all the non-0 features for every column in the count matrix
nf_pbmc <- apply(GetAssayData(pbmc, assay = "RNA"),2,nnzero)
nFeature_max_pbmc <- mean(pbmc@meta.data$nFeature_RNA) + 2 * sd(pbmc@meta.data$nFeature_RNA)
nFeature_max_pbmc
mean(pbmc@meta.data$nFeature_RNA)
#subsetting cells
pbmc <- subset(pbmc, subset = nFeature_RNA > 200 & nFeature_RNA < nFeature_max_pbmc & percent.mt < 10)
#replot the QC metric
VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
pbmc <- NormalizeData(object = pbmc, normalization.method = "LogNormalize", scaling.factor = 1e4)
pbmc@active.assay
pbmc <- ScaleData(object = pbmc,features = pbmc.genes)
pbmc.genes <- rownames(x = pbmc)
pbmc <- ScaleData(object = pbmc,features = pbmc.genes)
pbmc <- FindVariableFeatures(object = pbmc, selection.method = "vst", nfeature = 2000)
pbmc <- RunPCA(object = pbmc, features = VariableFeatures(object  = pbmc))
VizDimLoadings(object = pbmc, dims = 1:8, reduction = "pca")
Elbowplot(object = pbmc)
ElbowPlot(object = pbmc)
DimHeatmap(object = pbmc, dims = 1:15, cells = 500, balanced = TRUE)
DimHeatmap(object = pbmc, dims = 1:15, cells = 500, balanced = TRUE)
pbmc <- RunUMAP(object = pbmc, dims = 1:15)
pbmc@meta.data
str(pbmc@meta.data)
Dimplot(object = pbmc,  reduction = "umap", size = 0.5)
DimPlot(object = pbmc,  reduction = "umap", size = 0.5)
pbmc <- FindNeighbors(object = pbmc, dims = 1:15)
set.seed(15278158)
pbmc <- FindNeighbors(object = pbmc, dims = 1:15)
res = seq(0.1,1,0.2) # I provide several levels of clusters and will determin which level gives the most stable clustering
pbmc <- FindClusters(object = pbmc, resolution = res)
head(x = Idents(object = pbmc),5)
View(pbmc@meta.data)
library(clustree)
library(SC3)
str(pbmc_meta)
pbmc_meta <- pbmc@meta.data
str(pbmc_meta)
to_numeric <- function(x) {
as.numeric(as.character(x))
}
pbmc_meta <- pbmc@meta.data
#convert all cluster columns in metadata from factor to numeric for plott
to_numeric <- function(x) {
as.numeric(as.character(x))
}
pbmc_meta[grepl("RNA_snn", colnames(pbmc_meta))] <- lapply(pbmc_meta[grepl("RNA_snn", colnames(pbmc_meta))],f)
pbmc_meta[grepl("RNA_snn", colnames(pbmc_meta))] <- lapply(pbmc_meta[grepl("RNA_snn", colnames(pbmc_meta))],to_numeric)
str(pbmc_meta)
pbmc@meta.data <- pbmc@meta.data%>%
rename(res1 = RNA_snn_res.0.1,
res3 = RNA_snn_res.0.3,
res5 = RNA_snn_res.0.5,
res7 = RNA_snn_res.0.7,
res9 = RNA_snn_res.0.9)
#visualize tree of clusters
clustree(pbmc, prefix = "res", node_alpha = 0.8)
set.seed(15278158)
pbmc <- FindNeighbors(object = pbmc, dims = 1:15)
res = seq(0.1,1,0.1) # I provide several levels of clusters and will determin which level gives the most stable clustering
pbmc <- FindClusters(object = pbmc, resolution = res)
library(clustree)
library(SC3)
pbmc_meta <- pbmc@meta.data
#convert all cluster columns in metadata from factor to numeric for plott
to_numeric <- function(x) {
as.numeric(as.character(x))
}
pbmc_meta[grepl("RNA_snn", colnames(pbmc_meta))] <- lapply(pbmc_meta[grepl("RNA_snn", colnames(pbmc_meta))],to_numeric)
#rename cluster columns
pbmc@meta.data <- pbmc@meta.data%>%
rename(res1 = RNA_snn_res.0.1,
res3 = RNA_snn_res.0.3,
res5 = RNA_snn_res.0.5,
res7 = RNA_snn_res.0.7,
res9 = RNA_snn_res.0.9)
#visualize tree of clusters
clustree(pbmc, prefix = "res", node_alpha = 0.8)
str(pbmc@meta.data)
set.seed(15278158)
pbmc <- FindNeighbors(object = pbmc, dims = 1:15)
res = seq(0.1,1,0.1) # I provide several levels of clusters and will determin which level gives the most stable clustering
pbmc <- FindClusters(object = pbmc, resolution = res)
library(clustree)
library(SC3)
pbmc_meta <- pbmc@meta.data
#convert all cluster columns in metadata from factor to numeric for plott
to_numeric <- function(x) {
as.numeric(as.character(x))
}
pbmc_meta[grepl("RNA_snn", colnames(pbmc_meta))] <- lapply(pbmc_meta[grepl("RNA_snn", colnames(pbmc_meta))],to_numeric)
#rename cluster columns
pbmc@meta.data <- pbmc@meta.data%>%
rename(res1 = RNA_snn_res.0.1,
res2 = RNA_snn_res.0.2,
res3 = RNA_snn_res.0.3,
res4 = RNA_snn_res.0.4,
res5 = RNA_snn_res.0.5,
res6 = RNA_snn_res.0.6,
res7 = RNA_snn_res.0.7,
res8 = RNA_snn_res.0.8,
res9 = RNA_snn_res.0.9,
res10 = RNA_snn_res.1)
#visualize tree of clusters
clustree(pbmc, prefix = "res", node_alpha = 0.8)
#visualize tree of clusters
clustree(pbmc, prefix = "res", node_alpha = 0.8)
#visualize tree of clusters
clustree(pbmc, prefix = "res", node_alpha = 0.8)
#visualize tree of clusters
clustree(pbmc, prefix = "res", node_alpha = 0.8)
#visualize tree of clusters
clustree(pbmc, prefix = "res", node_alpha = 0.8)
table(pbmc@meta.data$res7)
#visualize tree of clusters
clustree(pbmc, prefix = "res", node_alpha = 0.8)
#plot with stability score
clustree(pbmc, prefix = "res", node_alpha = 0.8, node_colour = "sc3_stability")
Idents(pbmc) <- "res7"
DimPlot(object = pbmc,reduction = 'umap',pt,size = 0.7, split.by = "res7")
DimPlot(object = pbmc,reduction = 'umap',pt,size = 0.7)
?DimPlot
DimPlot(object = pbmc,reduction = 'umap',pt,size = 0.7)
DimPlot(object = pbmc,reduction = 'umap',pt.size = 0.7)
?FindAllMarkers
pbmc.markers <- FindAllMarkers(object = pbmc, only.pos = FALSE, min.pct = 0.1, logfc.threshold = 0.25)
pbmc.markers
#examine the top 6 markers for each cluster
top.markers.pbmc <- pbmc.markers %>% group_by(cluster) %>% top_n(n = 6, wt = avg_logFC)
write.csv(top.markers.pbmc,"/Users/weihan/Desktop/SZ_project/top_markers.csv")
head(top.markers.pbmc)
pbmc.cluster <- c("Naive T","NK-T","DC","CD8 T","B","NK","memory CD4+ T","B","DC","CD8 T","NK","DC","Platelet")
names(x = pbmc.cluster.ids) <- levels(x = pbmc)
pbmc.cluster.ids <- c("Naive T","NK-T","DC","CD8 T","B","NK","memory CD4+ T","B","DC","CD8 T","NK","DC","Platelet")
names(x = pbmc.cluster.ids) <- levels(x = pbmc)
pbmc <- RenameIdents(object = pbmc.cluster.ids)
names(x = pbmc.cluster.ids) <- levels(x = pbmc)
pbmc <- RenameIdents(object = pbmc, pbmc.cluster.ids)
Dimplot(object = pbmc, reduction = 'umap',label = TRUE, label.size = 8, pt.size = 1)
DimPlot(object = pbmc, reduction = 'umap',label = TRUE, label.size = 8, pt.size = 1)
DimPlot(object = pbmc, reduction = 'umap',label = TRUE, label.size = 4, pt.size = 0.5)
#S phase
s.genes <- cc.genes$s.genes
#G2/M Phase
g2m.genes <- cc.genes$g2m.genes
s.genes
?CellCycleScore
CellCycleScoring
?CellCycleScoring
pbmc <- CellCycleScoring(pbmc, s.features = s.genes,g2m.features = g2m.genes)
pbmc@meta.data
#let's run a UMAP and see if our cells are seperated by cell cycle
Dimplot(pbmc, reduction = "umap",group.by = "Phase", pt.size = 0.2, label = TRUE)
#let's run a UMAP and see if our cells are seperated by cell cycle
DimPlot(pbmc, reduction = "umap",group.by = "Phase", pt.size = 0.2, label = TRUE)
#let's run a UMAP and see if our cells are seperated by cell cycle
DimPlot(pbmc, reduction = "umap",group.by = "Phase", pt.size = 0.2, label = TRUE, split.by "Phase")
#let's run a UMAP and see if our cells are seperated by cell cycle
DimPlot(pbmc, reduction = "umap",group.by = "Phase", pt.size = 0.2, label = TRUE, split.by = "Phase")
str(pbmc@meta.data)
CellCycleScoring
View(pbmc@meta.data)
pbmc.cluster.ids <- c("Naive T","NK-T","DC","CD8 T","B","NK","memory CD4+ T","B","DC","CD8 T","NK","DC","Platelet")
names(x = pbmc.cluster.ids) <- levels(x = pbmc)
pbmc <- RenameIdents(object = pbmc, pbmc.cluster.ids)
DimPlot(object = pbmc, reduction = 'umap',label = TRUE, label.size = 4, pt.size = 0.5)
View(pbmc@meta.data)
pbmc@meta.data %>% mutate(final.ident = NA)
#assign every cluster
pbmc$final.ident = case_when((pbmc$res7 == 0) ~ 'Naive T',
(pbmc$res7 == 1) ~ "NK-T",
(pbmc$res7 == 2 | pbmc$res7 == 8 | pbmc$res7 == 11) ~ "DC",
(pbmc$res7 == 3 | pbmc$res7 == 9) ~ "CD8 T",
(pbmc$res7 == 4 | pbmc$res7 == 7) ~ "B",
(pbmc$res7 == 5 | pbmc$res7 == 10) ~ "NK",
(pbmc$res7 == 6) ~ "memory CD4+ T",
(pbmc$res7 == 12) ~ "Platelet" )
table(pbmc$final.ident )
table(pbmc$final.ident)
str(pbmc)
View(pbmc@meta.data)
#calculate percentage of each cell type in the total population
prop.table(table(pbmc@meta.data$final.ident))
str(pbmc@meta.data)
pbmc_meta %>%
group_by(final.ident) %>%
summarise(pct_cell_cycle = prop.table(table(pbmc@meta.data$Phase)))
pbmc_meta <- pbmc@meta.data
pbmc_meta %>%
group_by(final.ident) %>%
summarise(pct_cell_cycle = prop.table(table(pbmc_meta$Phase)))
pbmc_meta %>%
group_by(final.ident) %>%
prop.table(table(pbmc_meta$Phase))
pbmc_meta %>%
group_by(final.ident) %>%
prop.table(table(pbmc_meta$Phase),1)
pbmc_meta %>%
group_by(final.ident) %>%
summarise(pct = prop.table(table(pbmc_meta$Phase)))
table(pbmc_meta$Phase)
table(pbmc_meta$Phase)/nrow(pbmc_meta)
pbmc_meta %>%
group_by(final.ident) %>%
summarise(pct = table(pbmc_meta$Phase)/nrow(pbmc_meta))
pbmc_meta %>%
group_by(final.ident) %>%
table(pbmc_meta$Phase)/nrow(pbmc_meta)
table(pbmc_meta$Phase)/nrow(pbmc_meta)[0]
table(pbmc_meta$Phase)/nrow(pbmc_meta)[[0]]
table(pbmc_meta$Phase)/nrow(pbmc_meta)$1
table(pbmc_meta$Phase)/nrow(pbmc_meta)$G1
str(table(pbmc_meta$Phase)/nrow(pbmc_meta))
pbmc_meta %>%
group_by(final.ident) %>%
as.numeric(table(pbmc_meta$Phase)/nrow(pbmc_meta))
as.numeric(table(pbmc_meta$Phase)/nrow(pbmc_meta))
pct = c(NA,NA,NA)
pbmc_meta %>%
group_by(final.ident) %>%
summarise(pct <- as.numeric(table(pbmc_meta$Phase)/nrow(pbmc_meta)))
?tally+pct
?tally_pct
library(extdplyr)
install.packages("extdplyr")
library(extdplyr)
pbmc_meta %>%
group_by(final.ident) %>%
tally_pct(pbmc_meta$Phase)
pbmc_meta %>%
group_by(final.ident) %>%
tally_pct(Phase)
pbmc_meta$Phase < as.numeric(pbmc_meta$Phase)
as.numeric(pbmc_meta$Phase)
pbmc_meta$Phase
str(pbmc_meta)
pbmc_meta %>% select(c("final.ident","Phase")) %>%
group_by(final.ident) %>%
tally_pct()
pbmc_meta %>% select(c("final.ident","Phase"))
pbmc_meta %>% select(c("final.ident","Phase")) %>%
group_by(final.ident) %>%
pct_routine("Phase")
pbmc_meta %>% select(c("final.ident","Phase")) %>%
group_by(final.ident) %>%
pct_routine(Phase)
pbmc_meta_small %>% spread(key = Phase)
#only subset out the cell identity, Phase coplumn and calculate the percentage for each phase in each cell type
pbmc_meta_small <- pbmc_meta %>% select(c("final.ident","Phase")) %>%
group_by(final.ident) %>%
pct_routine(Phase)
pbmc_meta_small %>% spread(key = Phase)
library(tidyr)
pbmc_meta_small %>% spread(key = Phase)
spread(pbmc_meta_small,key = Phase)
spread(pbmc_meta_small,key = "Phase")
spread(pbmc_meta_small,key = Phase, value = pct)
#data maipulating for plotting
pbmc_meta_small <- spread(pbmc_meta_small,key = Phase, value = pct)
heatmap(pbmc_meta_small)
heatmap(as.matrix(pbmc_meta_small))
str(pbmc_meta_small)
pbmc_meta_small_mx <- as.matrix(pbmc_meta_small)
heatmap(pbmc_meta_small_mx)
str(pbmc_meta_small_mx)
str(pbmc_meta_small)
pbmc_meta_small <- as.data.frame(pbmc_meta_small)
str(pbmc_meta_small)
library(tibble)
pbmc_meta_small <- column_to_rownames(pbmc_meta_small, var = "final.ident")
heatmap(pbmc_meta_small)
heatmap(as.matrix(pbmc_meta_small))
pbmc_meta_small <- pbmc_meta %>% select(c("final.ident","Phase")) %>%
group_by(final.ident) %>%
pct_routine(Phase)
pbmc_meta_small
pbmc_meta_small %>% ggplot(aes(final.ident,Phase, fill = pct)) + geom_tile() + theme_ipsum()
pbmc_meta_small %>% ggplot(aes(final.ident,Phase, fill = pct)) + geom_tile()
library(hrbrthemes)
install.packages("hrbrthemes")
library(hrbrthemes)
library(plotly)
pbmc_meta_small %>% ggplot(aes(final.ident,Phase, fill = pct, text = text)) + geom_tile()
pbmc_meta_small
pbmc_meta_small %>%
mutate(text = paste0("cell identity: ", final.ident, "Phase", Phase, "percent",pct))
pbmc_meta_small %>%
mutate(text = paste0("cell identity: ", final.ident, "\Phase", Phase, "\percent",pct))
pbmc_meta_small %>%
mutate(text = paste0("cell identity: ", final.ident,"\n", "Phase", Phase,"\n", "percent",pct))
pbmc_meta_small <- pbmc_meta_small %>%
mutate(text = paste0("cell identity: ", final.ident,"\n", "Phase", Phase,"\n", "percent",pct))
pbmc_meta_small %>% ggplot(aes(final.ident,Phase, fill = pct, text = text)) + geom_tile()
plot <- pbmc_meta_small %>% ggplot(aes(final.ident,Phase, fill = pct, text = text)) + geom_tile()
ggplotly(plot, tooltip="text")
pbmc_meta_small %>%
mutate(text = paste0("cell identity: ", final.ident,"\n", "Phase", Phase,"\n", "percent",round(pct,2)))
pbmc_meta_small %>%
mutate(text = paste0("cell identity: ", final.ident,"\n", "Phase", Phase,"\n", "percent",round(pct,3)))
pbmc_meta_small <- pbmc_meta_small %>%
mutate(text = paste0("cell identity: ", final.ident,"\n", "Phase", Phase,"\n", "percent",round(pct,3)))
plot <- pbmc_meta_small %>% ggplot(aes(final.ident,Phase, fill = pct, text = text)) + geom_tile()
ggplotly(plot, tooltip="text")
library(wesanderson)
install.packages("wesanderson")
library(wesanderson)
pbmc_meta_small %>% ggplot(aes(final.ident,Phase, fill = pct, text = text)) + geom_tile()  +
scale_fill_manual(values = wes_palette("GrandBudapest1", n = 3))
plot <- pbmc_meta_small %>% ggplot(aes(final.ident,Phase, fill = pct, text = text)) + geom_tile()  + scale_color_gradient2(midpoint = mid, low = "blue", mid = "white",high = "red", space = "Lab" )
pbmc_meta_small %>% ggplot(aes(final.ident,Phase, fill = pct, text = text)) + geom_tile()  + scale_color_gradient2(midpoint = mid, low = "blue", mid = "white",high = "red", space = "Lab" )
pbmc_meta_small %>% ggplot(aes(final.ident,Phase, fill = pct, text = text)) + geom_tile() + scale_color_manual(values = c("#00AFBB", "#E7B800", "#FC4E07"))
ggplotly(plot, tooltip="text")
plot <- pbmc_meta_small %>% ggplot(aes(final.ident,Phase, fill = pct, text = text)) + geom_tile() + scale_color_gradientn(colours = rainbow(5))
pbmc_meta_small %>% ggplot(aes(final.ident,Phase, fill = pct, text = text)) + geom_tile() + scale_color_gradientn(colours = rainbow(5))
plot <- pbmc_meta_small %>% ggplot(aes(final.ident,Phase, fill = pct, text = text)) + geom_tile() + scale_fill_continuous(colours = rainbow(5))
?scale_fill_continuous
plot <- pbmc_meta_small %>% ggplot(aes(final.ident,Phase, fill = pct, text = text)) + geom_tile()
plot + scale_fill_continuous(colours = rainbow(5))
plot + scale_fill_continuous(low = "blue", high = "red")
plot + scale_fill_continuous(midpoint = mid, low = "blue", mid = "white",
high = "red", space = "Lab" )
plot + scale_color_brewer(palette = "Dark2")
?scale_color_brewer
plot + scale_color_brewer(palette = "RdBu")
?scale_fill_continuous
plot + scale_fill_continuous(type = "gradient")
plot + scale_fill_continuous(low = "blue", mid = "white",
high = "red")
plot + scale_fill_continuous(low = "blue", high = "red")
pal <- wes_palette("Zissou1", 100, type = "continuous")
plot + scale_fill_gradientn(colours = pal)
plot + scale_fill_gradient2(low = muted("red"),mid = "white",high = muted("blue"))
plot + scale_fill_gradient2(low = "red",mid = "white",high = "blue")
plot + scale_fill_gradient2(low = "red",mid = "white",high = "blue",midpoint = 0.5)
plot + scale_fill_gradient2(low = "blue",mid = "white",high = "red",midpoint = 0.4)
plot + scale_fill_gradient2(low = "#132B43",mid = "white",high = "#56B1F7",midpoint = 0.4)
plot + scale_fill_gradient2(low = "#132B43",high = "#56B1F7",midpoint = 0.4)
plot + scale_fill_gradient2(low = "#132B43",high = "#56B1F7",midpoint = 0.4,space = "Lab")
plot + scale_fill_gradient2(low = "#132B43",high = "#56B1F7",midpoint = 0.4,space = "Lab",guide = "colourbar")
plot + scale_fill_gradient2(low = "#132B43",high = "#56B1F7",midpoint = 0.4,space = "Lab",guide = "colourbar",aesthetics = "colour")
plot + scale_fill_gradient2(low = "#132B43",high = "#56B1F7",midpoint = 0.4,space = "Lab",guide = "colourbar")
plot + scale_fill_gradient2(low = "#132B43",high = "#56B1F7",midpoint = 0.4,space = "Lab",guide = "colourbar", aesthetics = "fill")
plot + scale_fill_gradient2(low = muted("blue"),mid = "white",high = "red",midpoint = 0.4,space = "Lab",guide = "colourbar")
?muted
library(scales)
plot + scale_fill_gradient2(low = muted("blue"),mid = "white",high = "red",midpoint = 0.4,space = "Lab",guide = "colourbar")
plot + scale_fill_gradient2(low = muted("blue"),mid = "white",high = muted("red"),midpoint = 0.4,space = "Lab",guide = "colourbar")
plot + scale_fill_gradient2(low = muted("blue"),mid = "white",high = "red",midpoint = 0.4,space = "Lab",guide = "colourbar")
ggplotly(plot, tooltip="text")
plot <- pbmc_meta_small %>% ggplot(aes(final.ident,Phase, fill = pct, text = text)) + geom_tile()
plot + scale_fill_gradient2(low = muted("blue"),mid = "white",high = "red",midpoint = 0.4,space = "Lab",guide = "colourbar")
ggplotly(plot, tooltip="text")
plot <- pbmc_meta_small %>% ggplot(aes(final.ident,Phase, fill = pct, text = text)) + geom_tile() +
scale_fill_gradient2(low = muted("blue"),mid = "white",high = "red",midpoint = 0.4,space = "Lab",guide = "colourbar")
ggplotly(plot, tooltip="text")
# save the widget
library(htmlwidgets)
aveWidget(plot, file=paste0( getwd(), "/HtmlWidget/ggplotlyHeatmap.html"))
# save the widget
library(htmlwidgets)
aveWidget(plot, file=paste0( getwd(), "/HtmlWidget/ggplotlyHeatmap.html"))
saveWidget(plot, file=paste0( getwd(), "/HtmlWidget/ggplotlyHeatmap.html"))
?saveWidget
active_plot <- ggplotly(plot, tooltip="text")
saveWidget(active_plot, file=paste0( getwd(), "/HtmlWidget/ggplotlyHeatmap.html"))
saveWidget(active_plot, file="/Users/weihan/Desktop/SZ_project/ggplotlyHeatmap.html")
plot <- pbmc_meta_small %>% ggplot(aes(final.ident,Phase, fill = pct, text = text)) + geom_tile() +
scale_fill_gradient2(low = muted("blue"),mid = "white",high = "red",midpoint = 0.4,space = "Lab",guide = "colourbar")
ggplotly(plot, tooltip="text")
pbmc_meta_small
library(extdplyr)
library(tidyr)
library(tibble)
library(plotly)
pbmc_meta <- pbmc@meta.data
pbmc_meta$Phase < as.numeric(pbmc_meta$Phase)
#only subset out the cell identity, Phase coplumn and calculate the percentage for each phase in each cell type
pbmc_meta_small <- pbmc_meta %>% select(c("final.ident","Phase")) %>%
group_by(final.ident) %>%
pct_routine(Phase)
#data maipulating for plotting
pbmc_meta_small <- spread(pbmc_meta_small,key = Phase, value = pct)
pbmc_meta_small <- as.data.frame(pbmc_meta_small)
pbmc_meta_small <- column_to_rownames(pbmc_meta_small, var = "final.ident")
pbmc_meta_small <- pbmc_meta_small %>%
mutate(text = paste0("cell identity: ", final.ident,"\n", "Phase", Phase,"\n", "percent",round(pct,3)))
pbmc_meta_small
pbmc_meta <- pbmc@meta.data
pbmc_meta$Phase < as.numeric(pbmc_meta$Phase)
#only subset out the cell identity, Phase coplumn and calculate the percentage for each phase in each cell type
pbmc_meta_small <- pbmc_meta %>% select(c("final.ident","Phase")) %>%
group_by(final.ident) %>%
pct_routine(Phase)
pbmc_meta_small
pbmc_meta_small <- pbmc_meta_small %>%
mutate(text = paste0("cell identity: ", final.ident,"\n", "Phase", Phase,"\n", "percent",round(pct,3)))
plot <- pbmc_meta_small %>% ggplot(aes(final.ident,Phase, fill = pct, text = text)) + geom_tile() +
scale_fill_gradient2(low = muted("blue"),mid = "white",high = "red",midpoint = 0.4,space = "Lab",guide = "colourbar")
ggplotly(plot, tooltip="text")
library(extdplyr)
library(tidyr)
library(tibble)
library(plotly)
pbmc_meta <- pbmc@meta.data
pbmc_meta$Phase < as.numeric(pbmc_meta$Phase)
#only subset out the cell identity, Phase coplumn and calculate the percentage for each phase in each cell type
pbmc_meta_small <- pbmc_meta %>% select(c("final.ident","Phase")) %>%
group_by(final.ident) %>%
pct_routine(Phase)
pbmc_meta_small <- pbmc_meta_small %>%
mutate(text = paste0("cell identity: ", final.ident,"\n", "Phase", Phase,"\n", "percent",round(pct,3)))
pbmc_meta_small
rm(pbmc_meta_small)
pbmc_meta <- pbmc@meta.data
pbmc_meta$Phase < as.numeric(pbmc_meta$Phase)
#only subset out the cell identity, Phase coplumn and calculate the percentage for each phase in each cell type
pbmc_meta_small <- pbmc_meta %>% select(c("final.ident","Phase")) %>%
group_by(final.ident) %>%
pct_routine(Phase)
pbmc_meta_small
pbmc_meta_small <- pbmc_meta_small %>%
mutate(text = paste0("cell identity: ", final.ident,"\n", "Phase", Phase,"\n", "percent",round(pct,3)))
plot <- pbmc_meta_small %>% ggplot(aes(final.ident,Phase, fill = pct, text = text)) + geom_tile() +
scale_fill_gradient2(low = muted("blue"),mid = "white",high = "red",midpoint = 0.4,space = "Lab",guide = "colourbar")
ggplotly(plot, tooltip="text")
?muted
