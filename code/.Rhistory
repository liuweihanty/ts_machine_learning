install.packages(c("devtools", "factoextra"))
knitr::opts_chunk$set(echo = TRUE)
ts.data <- read.csv("../data/work_data.csv", header = TRUE)
rownames(ts.data) <- ts.data$Gene
drop <- c('X','Gene','Entrez.GeneID','ENSEMBL_ID')
ts.data <- ts.data[,!(names(ts.data) %in% drop)]
head(ts.data)
pr.out <- prcomp(ts.data, scale = TRUE, center = TRUE)
summary(pr.out)
#elbowplot
pr.var <- pr.out$sdev^2
pve <- pr.var / sum(pr.var)
plot(pve, xlab = "Principal Component",
ylab = "Proportion of Variance Explained",
ylim = c(0, 1), type = "b")
#or you can just use: fviz_eig(pr.out,ncp = 20)
plot(cumsum(pve), xlab = "Principal Component",
ylab = "Cumulative Proportion of Variance Explained",
ylim = c(0, 1), type = "b")
#install and load factpextra: Easy Multivariate Data Analyses and Elegant Visualization for better PCA visualization
#if(!require(devtools)) install.packages("devtools")
devtools::install_github("kassambara/factoextra")
knitr::opts_chunk$set(echo = TRUE)
ts.data <- read.csv("../data/work_data.csv", header = TRUE)
rownames(ts.data) <- ts.data$Gene
drop <- c('X','Gene','Entrez.GeneID','ENSEMBL_ID')
ts.data <- ts.data[,!(names(ts.data) %in% drop)]
head(ts.data)
pr.out <- prcomp(ts.data, scale = TRUE, center = TRUE)
summary(pr.out)
#elbowplot
pr.var <- pr.out$sdev^2
pve <- pr.var / sum(pr.var)
plot(pve, xlab = "Principal Component",
ylab = "Proportion of Variance Explained",
ylim = c(0, 1), type = "b")
#or you can just use: fviz_eig(pr.out,ncp = 20)
plot(cumsum(pve), xlab = "Principal Component",
ylab = "Cumulative Proportion of Variance Explained",
ylim = c(0, 1), type = "b")
#install and load factpextra: Easy Multivariate Data Analyses and Elegant Visualization for better PCA visualization
#if(!require(devtools)) install.packages("devtools")
devtools::install_github("kassambara/factoextra")
library(factoextra)
fviz_pca_ind(pr.out,
col.ind = "cos2", # Color by the quality of representation
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE)
fviz_pca_var(pr.out,
col.var = "contrib", # Color by contributions to the PC
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE     # Avoid text overlapping
) + geom_text()
fviz_pca_var(pr.out,
col.var = "contrib", # Color by contributions to the PC
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE     # Avoid text overlapping
) + geom_text()
fviz_pca_biplot(pr.out, repel = TRUE,
col.var = "#2E9FDF", # Variables color
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
col.ind = "#696969" ,# Individuals color
label = "none")
wss <- 0
# For 1 to 44 cluster centers
for (i in 1:44) {
km.out <- kmeans(ts.data, centers = i, nstart = 20)
# Save total within sum of squares to wss variable
wss[i] <- km.out$tot.withinss
}
# Plot total within sum of squares vs. number of clusters
plot(1:44, wss, type = "b",
xlab = "Number of Clusters",
ylab = "Within groups sum of squares")
km.out <- kmeans(ts.data, centers = 3, nstart = 20, iter.max = 50)
km.out
hclust.avg <- hclust(dist(ts.data), method = 'average')
summary(hclust.avg)
hclust.comp <- hclust(dist(ts.data), method = 'complete')
summary(hclust.comp)
plot(hclust.avg, main = "Average")
plot(hclust.comp, main = "complete")
hclust.cut <- cutree(hclust.avg, k = 3)
hclust.cut
table(hclust.cut, km.out$cluster)
hclust.cut.cov = c()
for (i in 1:length(hclust.cut)) {
if (hclust.cut[i] == 1) {
hclust.cut.cov <- append(hclust.cut.cov, 2)
} else if (hclust.cut[i] == 2) {
hclust.cut.cov <- append(hclust.cut.cov, 3)
} else if (hclust.cut[i] == 3) {
hclust.cut.cov <- append(hclust.cut.cov, 1)
}
}
cluster <- data.frame('hclust' = hclust.cut.cov, 'kmeans' = km.out$cluster)
head(cluster, 10)
ts.data <- read.csv("../data/work_data.csv", header = TRUE)
rownames(ts.data) <- ts.data$Gene
drop <- c('X','Gene','Entrez.GeneID','ENSEMBL_ID')
ts.data <- ts.data[,!(names(ts.data) %in% drop)]
head(ts.data)
pr.out <- prcomp(ts.data, scale = TRUE, center = TRUE)
summary(pr.out)
#elbowplot
pr.var <- pr.out$sdev^2
pve <- pr.var / sum(pr.var)
plot(pve, xlab = "Principal Component",
ylab = "Proportion of Variance Explained",
ylim = c(0, 1), type = "b")
#or you can just use: fviz_eig(pr.out,ncp = 20)
plot(cumsum(pve), xlab = "Principal Component",
ylab = "Cumulative Proportion of Variance Explained",
ylim = c(0, 1), type = "b")
#install and load factpextra: Easy Multivariate Data Analyses and Elegant Visualization for better PCA visualization
#if(!require(devtools)) install.packages("devtools")
devtools::install_github("kassambara/factoextra")
library(factoextra)
fviz_pca_ind(pr.out,
col.ind = "cos2", # Color by the quality of representation
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE)
fviz_pca_var(pr.out,
col.var = "contrib", # Color by contributions to the PC
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE     # Avoid text overlapping
) + geom_text()
fviz_pca_var(pr.out,
col.var = "contrib", # Color by contributions to the PC
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE,     # Avoid text overlapping
label = "all"
) + geom_text()
fviz_pca_var(pr.out,
col.var = "contrib", # Color by contributions to the PC
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE,     # Avoid text overlapping
) + geom_text() + aes(label = 'gene')
fviz_pca_var(pr.out,
col.var = "contrib", # Color by contributions to the PC
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE,     # Avoid text overlapping
) + geom_text() + aes(label)
pr.out
fviz_pca_var(pr.out,
col.var = "contrib", # Color by contributions to the PC
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE,     # Avoid text overlapping
) + geom_text() + aes(label = (names(ts.data))
fviz_pca_var(pr.out,
col.var = "contrib", # Color by contributions to the PC
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE,     # Avoid text overlapping
) + geom_text() + aes(label = names(ts.data))
fviz_pca_var(pr.out,
col.var = "contrib", # Color by contributions to the PC
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE,     # Avoid text overlapping
geom = c("arrow", "text")
)
fviz_pca_var(pr.out,
col.var = "contrib", # Color by contributions to the PC
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE,     # Avoid text overlapping
) + geom_text()
fviz_pca_var(pr.out,
col.var = "contrib", # Color by contributions to the PC
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE     # Avoid text overlapping
) + geom_text()
knitr::opts_chunk$set(echo = TRUE)
chr7.data <- read.csv("../data/chr7_work_data.csv", header = TRUE)
rownames(chr7.data) <- chr7.data$Gene
drop <- c('X','Gene','ENSEMBL_ID')
chr7.data <- chr7.data[,!(names(chr7.data) %in% drop)]
head(chr7.data)
pr.out <- prcomp(chr7.data, scale = TRUE, center = TRUE)
summary(pr.out)
pr.out <- prcomp(chr7.data, scale = TRUE, center = TRUE)
summary(pr.out)
pr.var <- pr.out$sdev^2
pve <- pr.var / sum(pr.var)
plot(pve, xlab = "Principal Component",
ylab = "Proportion of Variance Explained",
ylim = c(0, 1), type = "b")
#or you can just use: fviz_eig(pr.out,ncp = 20)
plot(cumsum(pve), xlab = "Principal Component",
ylab = "Cumulative Proportion of Variance Explained",
ylim = c(0, 1), type = "b")
fviz_pca_ind(pr.out,
col.ind = "cos2", # Color by the quality of representation
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(tidyverse)  # data manipulation
library(cluster)    # clustering algorithms
library(factoextra) # clustering algorithms & visualization
chr7 <- read.csv("../data/chr7_work_data.csv", header = TRUE)
rownames(chr7) <- chr7$Gene
drop <- c('X','Gene','ENSEMBL_ID')
chr7 <- chr7[,!(names(chr7) %in% drop)]
head(chr7)
str(chr7)
colnames(chr7)
chr7 <- chr7 %>% select(-contains("fdr")) %>%
select(-contains("pvalue")) %>%
select(-contains("p.values"))
str(chr7)
for (i in 2:ncol(chr7)) {
#plot the density graph
print(ggplot(chr7, aes(x = chr7[,i], fill = type)) + geom_density(alpha = 0.4) + ggtitle(colnames(chr7[i])))
}
pr.out <- prcomp(chr7[,-1], scale = TRUE, center = TRUE)
summary(pr.out)
pr.var <- pr.out$sdev^2
pve <- pr.var / sum(pr.var)
plot(pve, xlab = "Principal Component",
ylab = "Proportion of Variance Explained",
ylim = c(0, 1), type = "b")
#or you can just use: fviz_eig(pr.out,ncp = 20)
plot(cumsum(pve), xlab = "Principal Component",
ylab = "Cumulative Proportion of Variance Explained",
ylim = c(0, 1), type = "b")
library(FactoMineR)
library("factoextra")
fviz_pca_ind(pr.out,
col.ind = chr7$type,
label = "none",
palette = c("#00AFBB", "#E7B800", "#FC4E07", "#9900FF"),
addEllipses=TRUE
)
chr7_scaled <- scale(chr7[,-1])
head(chr7_scaled)
distance <- get_dist(chr7_scaled, method = "pearson")
#visualize the distance matrix
fviz_dist(distance, gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
km.out <- kmeans(chr7_scaled, centers = 2, nstart = 25)
km.out
#attach the type column to scaled data, the type column specifies whether the gene is ts_96, loss(ts), amp(oncogene), or others
chr7_scaled <- cbind(chr7_scaled,as.character(chr7$type))
colnames(chr7_scaled)[30] <- "gene"
#convert the scaled chr7 data  from matrix to dataframe for easier manipulation for plotting
chr7_scaled <- as.data.frame(chr7_scaled, stringsAsFactors = FALSE)
#convert the numeric columns from character to numeric data type
chr7_scaled[1:29] <- lapply(chr7_scaled[1:29], function(x) type.convert(as.numeric(x)))
#convert the gene column to factor, for plotting
chr7_scaled$gene <- as.factor(chr7_scaled$gene)
#plot
fviz_cluster(km.out, data = chr7_scaled[1:29], labelsize = 1) +
geom_point(aes(colour = chr7_scaled$gene))
for (i in 3:5) {
km <- kmeans(chr7_scaled[-30], centers = i, nstart = 25)
p <- fviz_cluster(km, geom = "point", data = chr7_scaled[-30],alpha = 0.4) + geom_point(aes(colour = chr7_scaled$gene))
print(p)
}
library(cluster)
clusplot(chr7[, -1], km.out$cluster, color=TRUE, shade=FALSE,
labels=FALSE, lines=0)
group = c()
for (i in km.out$cluster) {
group <- append(group, i)
}
chr7.new <- chr7[1]
chr7.new$group <- group
chr7.amp <- subset(chr7.new, type == 'amp')
chr7.amp
chr7.loss <- subset(chr7.new, type == 'loss')
chr7.loss
chr7.ts96 <- subset(chr7.new, type == 'ts_96')
chr7.ts96
install.packages("caret")
library(ggplot2)
library(dplyr)
library(tidyr)
library(readxl)
library(readr)
library(tibble)
