install.packages(c("devtools", "factoextra"))
knitr::opts_chunk$set(echo = TRUE)
ts.data <- read.csv("../data/work_data.csv", header = TRUE)
rownames(ts.data) <- ts.data$Gene
drop <- c('X','Gene','Entrez.GeneID','ENSEMBL_ID')
ts.data <- ts.data[,!(names(ts.data) %in% drop)]
head(ts.data)
pr.out <- prcomp(ts.data, scale = TRUE, center = TRUE)
summary(pr.out)
#elbowplot
pr.var <- pr.out$sdev^2
pve <- pr.var / sum(pr.var)
plot(pve, xlab = "Principal Component",
ylab = "Proportion of Variance Explained",
ylim = c(0, 1), type = "b")
#or you can just use: fviz_eig(pr.out,ncp = 20)
plot(cumsum(pve), xlab = "Principal Component",
ylab = "Cumulative Proportion of Variance Explained",
ylim = c(0, 1), type = "b")
#install and load factpextra: Easy Multivariate Data Analyses and Elegant Visualization for better PCA visualization
#if(!require(devtools)) install.packages("devtools")
devtools::install_github("kassambara/factoextra")
knitr::opts_chunk$set(echo = TRUE)
ts.data <- read.csv("../data/work_data.csv", header = TRUE)
rownames(ts.data) <- ts.data$Gene
drop <- c('X','Gene','Entrez.GeneID','ENSEMBL_ID')
ts.data <- ts.data[,!(names(ts.data) %in% drop)]
head(ts.data)
pr.out <- prcomp(ts.data, scale = TRUE, center = TRUE)
summary(pr.out)
#elbowplot
pr.var <- pr.out$sdev^2
pve <- pr.var / sum(pr.var)
plot(pve, xlab = "Principal Component",
ylab = "Proportion of Variance Explained",
ylim = c(0, 1), type = "b")
#or you can just use: fviz_eig(pr.out,ncp = 20)
plot(cumsum(pve), xlab = "Principal Component",
ylab = "Cumulative Proportion of Variance Explained",
ylim = c(0, 1), type = "b")
#install and load factpextra: Easy Multivariate Data Analyses and Elegant Visualization for better PCA visualization
#if(!require(devtools)) install.packages("devtools")
devtools::install_github("kassambara/factoextra")
library(factoextra)
fviz_pca_ind(pr.out,
col.ind = "cos2", # Color by the quality of representation
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE)
fviz_pca_var(pr.out,
col.var = "contrib", # Color by contributions to the PC
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE     # Avoid text overlapping
) + geom_text()
fviz_pca_var(pr.out,
col.var = "contrib", # Color by contributions to the PC
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE     # Avoid text overlapping
) + geom_text()
fviz_pca_biplot(pr.out, repel = TRUE,
col.var = "#2E9FDF", # Variables color
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
col.ind = "#696969" ,# Individuals color
label = "none")
wss <- 0
# For 1 to 44 cluster centers
for (i in 1:44) {
km.out <- kmeans(ts.data, centers = i, nstart = 20)
# Save total within sum of squares to wss variable
wss[i] <- km.out$tot.withinss
}
# Plot total within sum of squares vs. number of clusters
plot(1:44, wss, type = "b",
xlab = "Number of Clusters",
ylab = "Within groups sum of squares")
km.out <- kmeans(ts.data, centers = 3, nstart = 20, iter.max = 50)
km.out
hclust.avg <- hclust(dist(ts.data), method = 'average')
summary(hclust.avg)
hclust.comp <- hclust(dist(ts.data), method = 'complete')
summary(hclust.comp)
plot(hclust.avg, main = "Average")
plot(hclust.comp, main = "complete")
hclust.cut <- cutree(hclust.avg, k = 3)
hclust.cut
table(hclust.cut, km.out$cluster)
hclust.cut.cov = c()
for (i in 1:length(hclust.cut)) {
if (hclust.cut[i] == 1) {
hclust.cut.cov <- append(hclust.cut.cov, 2)
} else if (hclust.cut[i] == 2) {
hclust.cut.cov <- append(hclust.cut.cov, 3)
} else if (hclust.cut[i] == 3) {
hclust.cut.cov <- append(hclust.cut.cov, 1)
}
}
cluster <- data.frame('hclust' = hclust.cut.cov, 'kmeans' = km.out$cluster)
head(cluster, 10)
ts.data <- read.csv("../data/work_data.csv", header = TRUE)
rownames(ts.data) <- ts.data$Gene
drop <- c('X','Gene','Entrez.GeneID','ENSEMBL_ID')
ts.data <- ts.data[,!(names(ts.data) %in% drop)]
head(ts.data)
pr.out <- prcomp(ts.data, scale = TRUE, center = TRUE)
summary(pr.out)
#elbowplot
pr.var <- pr.out$sdev^2
pve <- pr.var / sum(pr.var)
plot(pve, xlab = "Principal Component",
ylab = "Proportion of Variance Explained",
ylim = c(0, 1), type = "b")
#or you can just use: fviz_eig(pr.out,ncp = 20)
plot(cumsum(pve), xlab = "Principal Component",
ylab = "Cumulative Proportion of Variance Explained",
ylim = c(0, 1), type = "b")
#install and load factpextra: Easy Multivariate Data Analyses and Elegant Visualization for better PCA visualization
#if(!require(devtools)) install.packages("devtools")
devtools::install_github("kassambara/factoextra")
library(factoextra)
fviz_pca_ind(pr.out,
col.ind = "cos2", # Color by the quality of representation
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE)
fviz_pca_var(pr.out,
col.var = "contrib", # Color by contributions to the PC
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE     # Avoid text overlapping
) + geom_text()
fviz_pca_var(pr.out,
col.var = "contrib", # Color by contributions to the PC
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE,     # Avoid text overlapping
label = "all"
) + geom_text()
fviz_pca_var(pr.out,
col.var = "contrib", # Color by contributions to the PC
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE,     # Avoid text overlapping
) + geom_text() + aes(label = 'gene')
fviz_pca_var(pr.out,
col.var = "contrib", # Color by contributions to the PC
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE,     # Avoid text overlapping
) + geom_text() + aes(label)
pr.out
fviz_pca_var(pr.out,
col.var = "contrib", # Color by contributions to the PC
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE,     # Avoid text overlapping
) + geom_text() + aes(label = (names(ts.data))
fviz_pca_var(pr.out,
col.var = "contrib", # Color by contributions to the PC
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE,     # Avoid text overlapping
) + geom_text() + aes(label = names(ts.data))
fviz_pca_var(pr.out,
col.var = "contrib", # Color by contributions to the PC
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE,     # Avoid text overlapping
geom = c("arrow", "text")
)
fviz_pca_var(pr.out,
col.var = "contrib", # Color by contributions to the PC
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE,     # Avoid text overlapping
) + geom_text()
fviz_pca_var(pr.out,
col.var = "contrib", # Color by contributions to the PC
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE     # Avoid text overlapping
) + geom_text()
knitr::opts_chunk$set(echo = TRUE)
chr7.data <- read.csv("../data/chr7_work_data.csv", header = TRUE)
rownames(chr7.data) <- chr7.data$Gene
drop <- c('X','Gene','ENSEMBL_ID')
chr7.data <- chr7.data[,!(names(chr7.data) %in% drop)]
head(chr7.data)
pr.out <- prcomp(chr7.data, scale = TRUE, center = TRUE)
summary(pr.out)
pr.out <- prcomp(chr7.data, scale = TRUE, center = TRUE)
summary(pr.out)
pr.var <- pr.out$sdev^2
pve <- pr.var / sum(pr.var)
plot(pve, xlab = "Principal Component",
ylab = "Proportion of Variance Explained",
ylim = c(0, 1), type = "b")
#or you can just use: fviz_eig(pr.out,ncp = 20)
plot(cumsum(pve), xlab = "Principal Component",
ylab = "Cumulative Proportion of Variance Explained",
ylim = c(0, 1), type = "b")
fviz_pca_ind(pr.out,
col.ind = "cos2", # Color by the quality of representation
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE)
